
import logging
import random

from aiogram import *
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher.filters import BoundFilter, Text
import os

import config
from config import *

from aiogram.types import *
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import sqlite3


bot = Bot(token=token,disable_web_page_preview=True,parse_mode=ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())
db = "DataBase.db"

logging.basicConfig(level=logging.INFO, filename="py_log.log", filemode="w")
logging.debug("A DEBUG Message")
logging.info("An INFO")
logging.warning("A WARNING")
logging.error("An ERROR")
logging.critical("A message of CRITICAL severity")

@dp.message_handler(commands='start')
async def start(message: types.Message):
    try:
        with sqlite3.connect(db) as cursor:
            cursor.execute("INSERT INTO user (user_id) VALUES (?)", (message.from_user.id,)).fetchall()
        markup = InlineKeyboardMarkup(row_width=1)
        reg = InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏—é", callback_data="reg")
        instr = InlineKeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data='instr')
        sign = InlineKeyboardButton(text="–í—ã–¥–∞—Ç—å —Å–∏–≥–Ω–∞–ª",callback_data="sign")
        markup.add(reg,instr,sign)
        await bot.send_message(message.from_user.id,"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MINES OpenA!\n3 Mines - —ç—Ç–æ –≥—ç–º–±–ª–∏–Ω–≥ –∏–≥—Ä–∞ –≤ –±—É–∫–º–µ–∫–µ—Ä—Å–∫–æ–π –∫–æ–Ω—Ç–æ—Ä–µ 1win, –∫–æ—Ç–æ—Ä–∞—è –æ—Å–Ω–æ–≤—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º ‚Äú–°–∞–ø—ë—Ä–µ‚Äù. –í–∞—à–∞ —Ü–µ–ª—å - –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —è—á–µ–π–∫–∏ –∏ –Ω–µ –ø–æ–ø–∞–¥–∞—Ç—å—Å—è –≤ –ª–æ–≤—É—à–∫–∏.\n7 –ù–∞—à –±–æ—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –æ—Ç OpenA. –û–Ω –º–æ–∂–µ—Ç –ø—Ä–µ–¥—É–≥–∞–¥–∞—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∑–≤—ë–∑–¥ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 85%.",reply_markup=markup)
    except:
        markup = InlineKeyboardMarkup(row_width=1)
        reg = InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏—é", callback_data="reg")
        instr = InlineKeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data='instr')
        sign = InlineKeyboardButton(text="–í—ã–¥–∞—Ç—å —Å–∏–≥–Ω–∞–ª", callback_data="sign")
        markup.add(reg, instr, sign)
        await bot.send_message(message.from_user.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MINES OpenA!\n3 Mines - —ç—Ç–æ –≥—ç–º–±–ª–∏–Ω–≥ –∏–≥—Ä–∞ –≤ –±—É–∫–º–µ–∫–µ—Ä—Å–∫–æ–π –∫–æ–Ω—Ç–æ—Ä–µ 1win, –∫–æ—Ç–æ—Ä–∞—è –æ—Å–Ω–æ–≤—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º ‚Äú–°–∞–ø—ë—Ä–µ‚Äù. –í–∞—à–∞ —Ü–µ–ª—å - –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —è—á–µ–π–∫–∏ –∏ –Ω–µ –ø–æ–ø–∞–¥–∞—Ç—å—Å—è –≤ –ª–æ–≤—É—à–∫–∏.\n7 –ù–∞—à –±–æ—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –æ—Ç OpenA. –û–Ω –º–æ–∂–µ—Ç –ø—Ä–µ–¥—É–≥–∞–¥–∞—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∑–≤—ë–∑–¥ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 85%.", reply_markup=markup)


@dp.callback_query_handler(text='instr')
async def instr(callback: types.CallbackQuery):
    photo = InputFile('instr.png')
    await bot.send_photo(callback.from_user.id,photo=photo,caption=f'1. –ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –ë–ö https://1wymi.pro/casino/list?open=register&sub1={callback.from_user.id}#jwoe\n2. –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å\n3. –ü–µ—Ä–µ–π—Ç–∏ –≤ –∏–≥—Ä—É "Mines"\n4. –í—ã–±—Ä–∞—Ç—å –∫–æ–ª-–≤–æ –ª–æ–≤—É—à–µ–∫ 3\n5. –°—Ç–∞–≤–∏—Ç—å –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º –∏–∑ –±–æ—Ç–∞\n6. –ü—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ —É–¥–≤–æ–∏—Ç—å —Å—Ç–∞–≤–∫—É')

@dp.callback_query_handler(text='sign')
async def sign(callback: types.CallbackQuery):
    with sqlite3.connect(db) as cursor:
        user = cursor.execute("SELECT * FROM user WHERE user_id = ?", (callback.from_user.id,)).fetchall()
    if user[0][1] != None:
        directory = 'sign'
        files = os.listdir(directory)
        print(len(files))
        text = f"sign/{random.randint(1, len(files))}.png"
        photo = InputFile(text)
        markup = InlineKeyboardMarkup(row_width=1)
        instr = InlineKeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data='instr')
        sign = InlineKeyboardButton(text="–í—ã–¥–∞—Ç—å —Å–∏–≥–Ω–∞–ª", callback_data="sign")

        markup.add(sign, instr)
        await bot.send_photo(callback.from_user.id,photo=photo,reply_markup=markup)
    else:
        markup = InlineKeyboardMarkup(row_width=1)
        url = InlineKeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", url=f'https://1wymi.pro/casino/list?open=register&sub1={callback.from_user.id}#jwoe')
        markup.add(url)
        await bot.send_message(callback.from_user.id, "–°–Ω–∞—á–∞–ª–æ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏—éüëá", reply_markup=markup)


@dp.callback_query_handler(text='reg')
async def reg(callback: types.CallbackQuery):
    markup = InlineKeyboardMarkup(row_width=1)
    url = InlineKeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", url=f'https://1wymi.pro/casino/list?open=register&sub1={callback.from_user.id}#jwoe')
    markup.add(url)
    await bot.send_message(callback.from_user.id, "–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏—éüëá", reply_markup=markup)

@dp.message_handler(commands='admin')
async def admin(message: types.Message):
    if str(message.from_user.id) == config.admin_id:
        markup = InlineKeyboardMarkup(row_width=1)
        add_photo = InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª",callback_data='add_photo')
        markup.add(add_photo)
        await bot.send_message(message.from_user.id,"–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å",reply_markup=markup)
    else:
        await bot.send_message(message.from_user.id, "–í—ã –Ω–µ –∞–¥–º–∏–Ω")

class add_photo_st(StatesGroup):
    add_ph = State()

@dp.callback_query_handler(text='add_photo')
async def add_photo(callack: types.CallbackQuery):

    await bot.send_message(callack.from_user.id,f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å")
    await add_photo_st.add_ph.set()

@dp.message_handler(state=add_photo_st.add_ph,content_types=['photo'])
async def add_ph(message: types.Message, state: FSMContext):
    directory = 'sign'
    files = os.listdir(directory)
    await message.photo[-1].download(destination_file=f"sign/{len(files) + 1}.png")
    await bot.send_message(message.from_user.id,"–°–∏–≥–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω")
    await state.finish()


if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    executor.start_polling(dp, skip_updates=True)